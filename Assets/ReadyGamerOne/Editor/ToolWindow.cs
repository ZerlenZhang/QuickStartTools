using System.Collections.Generic;
using System.Reflection;
using ReadyGamerOne.Global;
using UnityEditor;
using UnityEngine;
using FileUtil = ReadyGamerOne.Utility.FileUtil;

namespace ReadyGamerOne.Editor
{
    public class ToolWindow:EditorWindow
    {

        [MenuItem("ReadyGamerOne/ToolWindow")]
        static void ShowWindow()
        {
            var win = GetWindow<ToolWindow>();
        }

        private string RootNamespace = "Root";
        private string UiNamespace = "View";
        private string ConstNamespace = "Const";
        private string DataNamespace = "Data";
        private string AutoGeneratedDirName = "Auto";
        private string ScriptNamespace="Script";
        
        private List<MethodInfo> _methodInfos = new List<MethodInfo>();
        private Vector2 pos;
        private List<string> names=new List<string>();
        private int index = 0;
        private GUIStyle _style;
        
        private void OnEnable()
        {
            _style=new GUIStyle
            {
                fontSize = 15,
                fontStyle = FontStyle.BoldAndItalic,
                alignment = TextAnchor.MiddleCenter
            };
            
            var types = Assembly.GetAssembly(typeof(IEditorTools)).GetTypes();
            foreach (var type in types)
            {
                if(type.IsInterface)
                    continue;
                if (typeof(IEditorTools).IsAssignableFrom(type))
                {
                    var func = type.GetMethod("OnToolsGUI", 
                        BindingFlags.IgnoreCase 
                        | BindingFlags.NonPublic
                        | BindingFlags.Static);
                    if(func==null)
                        continue;
//                    Debug.Log(type);
                    var name=type.GetField("Title",
                        BindingFlags.IgnoreCase 
                        | BindingFlags.NonPublic
                        | BindingFlags.Static);
                    _methodInfos.Add(func);
                    names.Add((string)name?.GetValue(null)?? type.Name);
                }
            }
        }
        
        

        private void OnDisable()
        {
            _methodInfos.Clear();
            names.Clear();
        }

        private void OnSelectionChange()
        {
            Repaint();
        }

        public void OnGUI()
        {
            RootNamespace = string.IsNullOrEmpty(RootNamespace) ? "Root" : RootNamespace;
            UiNamespace = string.IsNullOrEmpty(UiNamespace) ? "View" : UiNamespace;
            ConstNamespace = string.IsNullOrEmpty(ConstNamespace) ? "Const" : ConstNamespace;
            DataNamespace = string.IsNullOrEmpty(DataNamespace) ? "Data" : DataNamespace;
            AutoGeneratedDirName = string.IsNullOrEmpty(AutoGeneratedDirName) ? "Auto" : AutoGeneratedDirName;
            ScriptNamespace = string.IsNullOrEmpty(ScriptNamespace) ? "Script" : ScriptNamespace;
            
            
            EditorGUILayout.Space();
            EditorGUILayout.Space();
            EditorGUILayout.LabelField("命名空间", _style);
            RootNamespace = EditorGUILayout.TextField("RootNamespace", RootNamespace);
            UiNamespace = EditorGUILayout.TextField("UiNamespace", UiNamespace);
            ConstNamespace = EditorGUILayout.TextField("ConstNamespace", ConstNamespace);
            DataNamespace = EditorGUILayout.TextField("DataNamespace", DataNamespace);
            AutoGeneratedDirName = EditorGUILayout.TextField("AutoGeneratedDirName", AutoGeneratedDirName);
            ScriptNamespace = EditorGUILayout.TextField("ScriptNamespace", ScriptNamespace);

            EditorGUILayout.Space();

            if (RootNamespace == "Root" || string.IsNullOrEmpty(RootNamespace))
            {
                EditorGUILayout.HelpBox("忘了设置命名空间了！", MessageType.Error);
                return;
            }
            
            

            if (GUILayout.Button("创建相关文件夹"))
            {
                var root = Application.dataPath + "/" + RootNamespace;
                FileUtil.CreateFolder(root);
                FileUtil.CreateFolder(root + "/" + UiNamespace);
                FileUtil.CreateFolder(root + "/" + ConstNamespace);
                FileUtil.CreateFolder(root + "/" + DataNamespace);
                FileUtil.CreateFolder(root + "/" + ScriptNamespace);
                FileUtil.CreateFolder(root + "/" + "Scenes");
                FileUtil.CreateFolder(root + "/" + "Prefabs");
                AssetDatabase.Refresh();
                Debug.Log("生成完毕");
            }

//            if (GUILayout.Button("创建GameMgr"))
//            {
//                var go = new GameObject("GameMgr");
//                Debug.Log(RootNamespace+"."+ScriptNamespace +"." + RootNamespace + "Mgr");
//                var type = Type.GetType(RootNamespace+"."+ScriptNamespace +"." + RootNamespace + "Mgr");
//                Debug.Log(type);
//                go.AddComponent(type);
//            }
            
            EditorGUILayout.Space();
            pos = GUILayout.BeginScrollView(pos);

            var arr = new[] {RootNamespace, UiNamespace, ConstNamespace, DataNamespace, AutoGeneratedDirName,ScriptNamespace};
            if (names.Count > 0)
            {
                index = GUILayout.Toolbar(index, names.ToArray());

                _methodInfos[index].Invoke(null,arr);
                
            }else
                GUILayout.Label("没有内容。。。");

            GUILayout.EndScrollView();
        }
    }
}